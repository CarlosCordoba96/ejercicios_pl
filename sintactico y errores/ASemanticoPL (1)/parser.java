
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 11 19:28:53 CEST 2010
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 11 19:28:53 CEST 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\010\007\000\002\002\004\000\002\004" +
    "\003\000\002\002\003\000\002\006\007\000\002\006\006" +
    "\000\002\005\007\000\002\003\003\000\002\007\010\000" +
    "\002\007\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\014\006\001\002\000\004\002\035\001" +
    "\002\000\004\004\010\001\002\000\004\004\uffff\001\002" +
    "\000\004\010\012\001\002\000\004\010\ufffe\001\002\000" +
    "\004\006\025\001\002\000\004\011\013\001\002\000\004" +
    "\015\015\001\002\000\004\005\022\001\002\000\004\007" +
    "\016\001\002\000\004\015\017\001\002\000\004\007\020" +
    "\001\002\000\004\015\021\001\002\000\004\005\ufffb\001" +
    "\002\000\006\006\ufffc\010\012\001\002\000\004\006\ufffd" +
    "\001\002\000\004\012\027\001\002\000\004\012\ufffa\001" +
    "\002\000\004\002\001\001\002\000\004\010\030\001\002" +
    "\000\004\013\031\001\002\000\004\010\032\001\002\000" +
    "\004\005\033\001\002\000\006\002\ufff8\012\027\001\002" +
    "\000\004\002\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\004\004\010\003\001\001\000\002\001" +
    "\001\000\004\002\006\001\001\000\002\001\001\000\004" +
    "\006\010\001\001\000\002\001\001\000\004\003\023\001" +
    "\001\000\002\001\001\000\004\005\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\022" +
    "\001\001\000\002\001\001\000\004\007\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\033\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Cambia el método report_error de manera que se mostrará la línea y
       columna de la entrada donde ocurre el error así como la
       razón del error que es pasada al método en el
       String 'message'. */

    public void report_error(String message, Object info) {
   
        /* Crea un StringBuffer llamado 'm' con el string 'Error' en él. */

        StringBuffer m = new StringBuffer("Error");
   
        /* Chequea si la información pasada al método es del mismo
           tipo que el tipo java_cup.runtime.Symbol. */

        if (info instanceof java_cup.runtime.Symbol) {

            /* Declara un objeto 's' del tipo java_cup.runtime.Symbol con la
               información que hay en el objeto info que está siendo convertido
               como un objeto java_cup.runtime.Symbol. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Chequea si el número de línea en la entrada es mayor o
               igual que cero. */
            if (s.left >= 0) {                
                /* Añade al final del mensaje de error StringBuffer
                   el número de línea del error en la entrada. */
                m.append(" en la linea "+(s.left+1));   
                /* Chequea si el número de columna en la entrada es mayor
                   o igual que cero. */
                if (s.right >= 0)                    
                    /* Añade al final del mensaje de error StringBuffer
                       el número de columna del error en la entrada. */
                    m.append(", columna "+(s.right+1));
            }
        }
   
        /* Añade al final del mensaje de error StringBuffer creado en
           este método el mensaje que fue pasado a este método. */
        m.append(" : "+message);
   
        /* Imprime los contenidos del StringBuffer 'm', que contiene
           el mensaje de error. */
        System.err.println(m);
    }
   
    /* Cambia el método report_fatal_error de manera que cuando se informa
       de un error fatal se mostrará el número de línea y columna donde el
       fatal error ha ocurrido en la entrada así como la razón del error 
       fatal que es pasado al método en el objeto 'message' y entonces sale.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // V ::= Origen Usuario Destino Usuario PuntoyComa 
            {
              Vector<Relacion> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Vector<Relacion> v=new Vector<Relacion>(); Relacion relacion=new Relacion (o,d); v.add(relacion); RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // V ::= Origen Usuario Destino Usuario PuntoyComa V 
            {
              Vector<Relacion> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Relacion> vector = (Vector<Relacion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Relacion relacion=new Relacion (o,d); vector.add(relacion);RESULT=vector;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A ::= Vinculos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Fecha ::= Digito Guion Digito Guion Digito 
            {
              Date RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer ad = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bd = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer cd = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Date f=new Date (ad.intValue(),bd.intValue(),cd.intValue()); RESULT=f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fecha",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // U ::= Usuario Password Fecha PuntoyComa 
            {
              Vector<Usuario> RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String us = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Date fe = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Vector<Usuario> v=new Vector<Usuario>(); Usuario usuario=new Usuario (us,pa,fe); v.add(usuario); RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // U ::= Usuario Password Fecha PuntoyComa U 
            {
              Vector<Usuario> RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String us = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Date fe = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Usuario> vector = (Vector<Usuario>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Usuario usuario=new Usuario (us,pa,fe); vector.add(usuario);RESULT=vector;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("U",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= Participantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // R ::= NombreRed 
            {
              String RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=nr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Red start_val = (Red)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= R P U A V 
            {
              Red RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String re = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<Usuario> us = (Vector<Usuario>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Relacion> vi = (Vector<Relacion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Red red=new Red(re,us,vi); RESULT=red; SimpleTree st=new SimpleTree(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

